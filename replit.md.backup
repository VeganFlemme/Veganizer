# Veganizer

## Overview

Veganizer is a French web application that converts omnivorous recipes into vegan alternatives with nutritional analysis and automated shopping list generation. The application features a modern React frontend with a Node.js/Express backend, utilizing PostgreSQL with Drizzle ORM for data persistence. It includes a comprehensive database of French recipes, ingredient substitutions, and nutritional data based on the Ciqual 2020 database.

## User Preferences

Preferred communication style: Simple, everyday language.

## Recent Changes

- **Revolutionary Logo Design (December 2025)**: Implemented groundbreaking sausage-to-leaf transformation logo concept that perfectly represents Veganizer's mission
  - **Left side**: Cylindrical sausage in red-brown gradient with meat texture
  - **Right side**: Organic leaf in green gradient with natural veining  
  - **Symbolism**: Visual transformation from meat (omnivore) to plant (vegan)
  - **Assets created**: Icon version, brand version, PNG variants (192x192, 512x512)
- **Complete Site Integration**: Updated all components, PWA assets, manifest, service worker, and meta tags with new sausage-to-leaf branding
- **Design System**: Maintained modern minimalist neutral color scheme with new transformative logo as centerpiece
- **PWA Optimization**: Enhanced Progressive Web App functionality with new logo assets and improved caching (v11)

## System Architecture

### Frontend Architecture
- **Framework**: React with TypeScript using Vite for build tooling
- **UI Library**: Shadcn/ui components with Radix UI primitives for accessibility
- **Styling**: Tailwind CSS with CSS variables for theming
- **State Management**: TanStack Query for server state and API caching
- **Routing**: Wouter for lightweight client-side routing
- **Charts**: Chart.js for nutritional comparison visualizations

### Backend Architecture
- **Runtime**: Node.js with Express.js server
- **Language**: TypeScript with ES modules
- **Database**: PostgreSQL with Drizzle ORM for type-safe queries
- **Connection**: Neon serverless database with connection pooling
- **Session Management**: Express sessions with PostgreSQL store
- **Data Import**: CSV parsing for recipe and nutritional data import

### Data Models
- **Recipes Table**: Stores original recipes with up to 6 ingredients and their vegan equivalents
- **Ingredient Substitutions**: Maps omnivorous ingredients to vegan alternatives with ratios
- **Ciqual Data**: French nutritional database for ingredient analysis
- **Unique Constraints**: Normalized text matching using unaccent for French language support

### API Design
- **RESTful Endpoints**: 
  - `/api/recipes/search` - Recipe search with French text normalization
  - `/api/recipes/convert` - Recipe conversion with nutritional analysis
  - `/api/recipes` - Recipe listing and management
- **Error Handling**: Centralized error middleware with structured responses
- **Request Logging**: Detailed API request logging with response capture

### Business Logic
- **Recipe Conversion**: Smart matching algorithm for finding vegan alternatives
- **Substitution Engine**: Ingredient-level replacements with category-based fallbacks
- **Nutritional Analysis**: Comparative analysis between original and vegan versions
- **Shopping List Generation**: Categorized ingredient lists with cost estimation

## External Dependencies

### Core Dependencies
- **@neondatabase/serverless**: PostgreSQL serverless connection for Neon database
- **drizzle-orm**: Type-safe PostgreSQL ORM with migration support
- **express**: Web server framework with middleware ecosystem
- **@tanstack/react-query**: Server state management and caching
- **csv-parser**: CSV file processing for data import

### UI Dependencies
- **@radix-ui/react-***: Accessible component primitives (dialog, dropdown, etc.)
- **tailwindcss**: Utility-first CSS framework
- **chart.js**: Data visualization for nutritional comparisons
- **lucide-react**: Icon library for consistent visual elements

### Development Tools
- **vite**: Fast build tool with TypeScript and React support
- **tsx**: TypeScript execution for development server
- **esbuild**: Fast bundling for production builds
- **drizzle-kit**: Database migration and schema management

### Database Integration
- **connect-pg-simple**: PostgreSQL session store for Express
- **ws**: WebSocket support for Neon database connections
- **csv-parser**: Import functionality for Ciqual nutritional data

The application implements a full-stack TypeScript architecture with strong type safety from database to UI, leveraging modern React patterns and PostgreSQL for reliable data persistence.